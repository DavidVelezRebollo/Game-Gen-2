//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/SCRIPTS/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""InputPlayer"",
            ""id"": ""e82c5e45-a74b-4d5e-87b6-438b48e80415"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7f8f6f95-878d-4fbd-a781-93ef6b057356"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Change"",
                    ""type"": ""Button"",
                    ""id"": ""cddc5e2a-4393-4df9-a8f4-f18409086bd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftSelect"",
                    ""type"": ""Button"",
                    ""id"": ""b8e86f7e-c13b-4e1d-b0b0-5cd410923db7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSelect"",
                    ""type"": ""Button"",
                    ""id"": ""3f578fe5-92f3-46ec-89f6-52fed7ef7fd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b85dc196-bb40-4040-b0c2-8266043e265c"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e803b0aa-83e8-4918-9bf7-8bf631678bf8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""59147517-7fec-4521-a66b-1359d0127c0e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""4e57e471-bab0-4328-9225-9f9650a8db67"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bc4b4575-bf0a-4e9f-b9ec-4326445c7d07"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8423ad6f-31b3-44de-997e-89f59145e941"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be5b2606-88ed-4ee8-b237-9b76005e165c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bb93873-5d8b-43ca-a14a-ca8d71e7ac51"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6fbc596-c94a-471f-860b-88d2474af852"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIInputs"",
            ""id"": ""73c361fa-75e6-4e7b-a517-6996b82159f9"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""689e19bb-dbc6-4b91-ac36-ae94945d3cd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c5b589bd-b8f5-4a62-a0c4-b6a49751d6f8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputPlayer
        m_InputPlayer = asset.FindActionMap("InputPlayer", throwIfNotFound: true);
        m_InputPlayer_Movement = m_InputPlayer.FindAction("Movement", throwIfNotFound: true);
        m_InputPlayer_Change = m_InputPlayer.FindAction("Change", throwIfNotFound: true);
        m_InputPlayer_LeftSelect = m_InputPlayer.FindAction("LeftSelect", throwIfNotFound: true);
        m_InputPlayer_RightSelect = m_InputPlayer.FindAction("RightSelect", throwIfNotFound: true);
        // UIInputs
        m_UIInputs = asset.FindActionMap("UIInputs", throwIfNotFound: true);
        m_UIInputs_Pause = m_UIInputs.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputPlayer
    private readonly InputActionMap m_InputPlayer;
    private IInputPlayerActions m_InputPlayerActionsCallbackInterface;
    private readonly InputAction m_InputPlayer_Movement;
    private readonly InputAction m_InputPlayer_Change;
    private readonly InputAction m_InputPlayer_LeftSelect;
    private readonly InputAction m_InputPlayer_RightSelect;
    public struct InputPlayerActions
    {
        private @InputActions m_Wrapper;
        public InputPlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputPlayer_Movement;
        public InputAction @Change => m_Wrapper.m_InputPlayer_Change;
        public InputAction @LeftSelect => m_Wrapper.m_InputPlayer_LeftSelect;
        public InputAction @RightSelect => m_Wrapper.m_InputPlayer_RightSelect;
        public InputActionMap Get() { return m_Wrapper.m_InputPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IInputPlayerActions instance)
        {
            if (m_Wrapper.m_InputPlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnMovement;
                @Change.started -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnChange;
                @Change.performed -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnChange;
                @Change.canceled -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnChange;
                @LeftSelect.started -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnLeftSelect;
                @LeftSelect.performed -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnLeftSelect;
                @LeftSelect.canceled -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnLeftSelect;
                @RightSelect.started -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnRightSelect;
                @RightSelect.performed -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnRightSelect;
                @RightSelect.canceled -= m_Wrapper.m_InputPlayerActionsCallbackInterface.OnRightSelect;
            }
            m_Wrapper.m_InputPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Change.started += instance.OnChange;
                @Change.performed += instance.OnChange;
                @Change.canceled += instance.OnChange;
                @LeftSelect.started += instance.OnLeftSelect;
                @LeftSelect.performed += instance.OnLeftSelect;
                @LeftSelect.canceled += instance.OnLeftSelect;
                @RightSelect.started += instance.OnRightSelect;
                @RightSelect.performed += instance.OnRightSelect;
                @RightSelect.canceled += instance.OnRightSelect;
            }
        }
    }
    public InputPlayerActions @InputPlayer => new InputPlayerActions(this);

    // UIInputs
    private readonly InputActionMap m_UIInputs;
    private IUIInputsActions m_UIInputsActionsCallbackInterface;
    private readonly InputAction m_UIInputs_Pause;
    public struct UIInputsActions
    {
        private @InputActions m_Wrapper;
        public UIInputsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_UIInputs_Pause;
        public InputActionMap Get() { return m_Wrapper.m_UIInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIInputsActions set) { return set.Get(); }
        public void SetCallbacks(IUIInputsActions instance)
        {
            if (m_Wrapper.m_UIInputsActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_UIInputsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_UIInputsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_UIInputsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_UIInputsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public UIInputsActions @UIInputs => new UIInputsActions(this);
    public interface IInputPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnChange(InputAction.CallbackContext context);
        void OnLeftSelect(InputAction.CallbackContext context);
        void OnRightSelect(InputAction.CallbackContext context);
    }
    public interface IUIInputsActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
